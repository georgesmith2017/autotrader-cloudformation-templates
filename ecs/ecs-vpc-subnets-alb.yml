AWSTemplateFormatVersion: '2010-09-09'
Parameters:

  # Ownership
  Owner:
    Type: String
    Default: George Smith
  Project:
    Type: String
    Default: EP Storefront Project

  # Subnets
  VPCSubnetCidrBlock:
    Description: 10.0.0.0/16 = 10.0.0.0-10.0.255.255 = 256 Subnets = 65534 hosts
    Type: String
    Default: 10.0.0.0/16
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  
  # AZs
  AvailabilityZone1:
    Type: String
    Default: a
    AllowedValues:
    - a
    - b

  AvailabilityZone2:
    Type: String
    Default: b
    AllowedValues:
    - a
    - b

  # Subnet CIDRs
  PublicSubnetCidrBlock1:
    Type: String
    Default: 10.0.1.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PublicSubnetCidrBlock2:
    Type: String
    Default: 10.0.2.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

  # Rule Numbers
  AllowVpcSubnetsRuleNumber:
    Type: Number
    Default: '100'
  AllowRemoteNetworkPublicRuleNumber:
    Type: Number
    Default: '105'
  AllowHttpToPublicRuleNumber:
    Type: Number
    Default: '200'
  AllowHttpsToPublicRuleNumber:
    Type: Number
    Default: '205'
  AllowSSHToPublicRuleNumber:
    Type: Number
    Default: '210'
  DenyMysqlToPublicRuleNumber:
    Type: Number
    Default: '800'
  DenyOracleToPublicRuleNumber:
    Type: Number
    Default: '805'
  DenyAuroraToPublicRuleNumber:
    Type: Number
    Default: '810'
  DenyNFSToPublicRuleNumber:
    Type: Number
    Default: '815'
  DenyRDPToPublicRuleNumber:
    Type: Number
    Default: '820'
  DenyPostgreToPublicRuleNumber:
    Type: Number
    Default: '825'
  Deny8080ToPublicRuleNumber:
    Type: Number
    Default: '830'
  Deny8443ToPublicRuleNumber:
    Type: Number
    Default: '835'
  AllowReturnTrafficToPublicRuleNumber:
    Type: Number
    Default: '900'
  AllowAllOutboundPublicRuleNumber:
    Type: Number
    Default: '100'

  # Allowable EC2 instance types
  InstanceType:
    Description: React NodeJS Storefront EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.medium
    ConstraintDescription: Select a valid EC2 instance type

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VPCSubnetCidrBlock
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref AvailabilityZone1 ] ]
      CidrBlock: !Ref PublicSubnetCidrBlock1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-public-az1" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", !Ref AvailabilityZone2 ] ]
      CidrBlock: !Ref PublicSubnetCidrBlock2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-public-az2" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-public" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - PublicRouteTable
    - InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - PublicRouteTable
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Public Network ACL
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-public-acl" ] ]
      - Key: Owner
        Value: !Ref Owner
      - Key: Project
        Value: !Ref Project

  # Public Network ACL Rules
  InboundPublicNetworkAclAllowVPCSubnets:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowVpcSubnetsRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref VPCSubnetCidrBlock
      PortRange:
        From: '0'
        To: '65535'
  InboundPublicNetworkAclAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowHttpToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundPublicNetworkAclAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowHttpsToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundPublicNetworkAclAllowHSSH:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowSSHToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundPublicNetworkAclDenyMssql:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyMysqlToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1433'
        To: '1433'
  InboundPublicNetworkAclDenyAurora:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyAuroraToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3306'
        To: '3306'
  InboundPublicNetworkAclDenyNfs:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyNFSToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '2049'
        To: '2049'
  InboundPublicNetworkAclDenyRdp:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyRDPToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3389'
        To: '3389'
  InboundPublicNetworkAclDenyPostgre:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref DenyPostgreToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '5432'
        To: '5432'
  InboundPublicNetworkAclDeny8080:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref Deny8080ToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8080'
        To: '8080'
  InboundPublicNetworkAclDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref Deny8443ToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  InboundPublicNetworkAclDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref Deny8443ToPublicRuleNumber
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  InboundPublicNetworkAclAllowReturnTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowReturnTrafficToPublicRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: !Ref AllowAllOutboundPublicRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Public Subnet Association
  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet1
    - PublicNetworkAcl
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet2
    - PublicNetworkAcl
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VPC

  ecsalb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ecsalb
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroups:
      - Ref: EcsSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'EcsTargetGroup'
      LoadBalancerArn: !Ref 'ecsalb'
      Port: '80'
      Protocol: HTTP

  EcsAlbListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'EcsTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1

  EcsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ecsalb
    Properties:
      HealthCheckEnabled: true
      TargetType: instance
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /greetings/hello
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: EcsTargetGroup
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress', 's3:*']
            Resource: '*'

Outputs:
  Owner:
    Description: Team or Individual that Owns this Formation.
    Value: !Ref Owner
  Project:
    Description: The project name
    Value: !Ref Project
  VPC:
    Description: Created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  VPCCIDR:
    Description: VPC Subnet CIDR Block
    Value: !Ref VPCSubnetCidrBlock
  PublicRouteTable:
    Description: Public Route Table Created for VPC
    Value: !Ref PublicRouteTable
  PublicNetworkAcl:
    Description: Public Network ACL Created for VPC
    Value: !Ref PublicNetworkAcl
  PublicSubnet1:
    Description: Public Subnet 1 Created for VPC
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-VPCID-PublicSubnet1"
  PublicSubnet2:
    Description: Public Subnet 2 Created for VPC
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-VPCID-PublicSubnet2"
  InternetGateway:
    Description: Internet Gateway Created for VPC
    Value: !Ref InternetGateway
  ecsalb:
    Description: Your ALB
    Value: !Ref ecsalb
  EcsAlbDns:
    Description: Your ALB DNS URL
    Value: !Join ['', [!GetAtt [ecsalb, DNSName]]]
  EcsAlbName:
    Description: Your ALB name
    Value: !GetAtt [ecsalb, LoadBalancerName]
  ALBListener:
    Description: Your ALB Listener
    Value: !Ref ALBListener
    Export:
      Name: !Sub "${AWS::StackName}-VPCID-ALBListener"
  EcsTargetGroupName:
    Description: Your ALB EcsTargetGroup name
    Value: !GetAtt [EcsTargetGroup, TargetGroupName]
    Export:
      Name: !Sub "${AWS::StackName}-VPCID-EcsTargetGroupName"
  EcsTargetGroup:
    Description: ECS target group that will be used by the ECS service
    Value: !Ref EcsTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-VPCID-EcsTargetGroup"
  EcsSecurityGroup:
    Description: The security group for the ALB
    Value: !Ref EcsSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-VPCID-EcsSecurityGroup"
  ECSServiceRole:
    Description: The service role for the ECS service
    Value: !Ref ECSServiceRole
    Export:
      Name: !Sub "${AWS::StackName}-VPCID-ECSServiceRole"
